name: IRL Test
description: Integration tests workflow

on:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 6,18 * * *'  # Every day at 06:00 and 18:00 (twice a day)
  workflow_dispatch:
    inputs:
      os:
        description: Operating system to run tests (will use latest version)
        type: choice
        options: [ Ubuntu, Windows, macOS, All ]
        default: All
        required: false
      node-version:
        description: Node.js version
        type: choice
        options: [ 18.x, 20.x, 21.x, 22.x, 23.x, latest, All ]
        default: All
        required: false
      ffmpeg-version:
        description: FFmpeg version to use (set to 'latest' to use the latest release)
        type: string
        default: latest
        required: false
      ffmpeg-arch:
        description: FFmpeg architecture to use
        type: choice
        options: [ x86, x64 ]
        default: x64
        required: false

jobs:
  parse-inputs:
    name: Parse Inputs
    runs-on: ubuntu-latest

    outputs:
      matrix-node-version: ${{ steps.node-version-parser.outputs.matrix }}
      matrix-os: ${{ steps.os-parser.outputs.matrix }}

    steps:
    - id: node-version-parser
      run: |
        versions=("$EXPECTED_INPUTS")
        if [[ -n "$INPUT" && "$INPUT" != "All" ]]; then
          versions=("$INPUT")
        fi
        # Generate JSON output
        matrix_json="{ \"include\": ["
        for version in "${versions[@]}"; do
          matrix_json+="{ \"node-version\": \"$version\" },"
        done
        # Remove the trailing comma and close JSON object
        matrix_json="${matrix_json%,}] }"
        matrix_json="$(echo "$matrix_json" | jq .)"
        echo "$matrix_json"  # For debugging
        echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"
      env:
        INPUT: ${{ inputs.node-version }}
        EXPECTED_INPUTS: "18.x 20.x 21.x 22.x 23.x latest"

    - id: os-parser
      run: |
        os_list=("$EXPECTED_INPUTS")
        if [[ -n "$INPUT" && "$INPUT" != "All" ]]; then
          os_list=("$INPUT")
        fi
        # Generate JSON output
        matrix_json="{ \"include\": ["
        for os in "${os_list[@]}"; do
          matrix_json+="{ \"os\": \"$os\" },"
        done
        # Remove the trailing comma and close JSON object
        matrix_json="${matrix_json%,}] }"
        matrix_json="$(echo "$matrix_json" | jq .)"
        echo "$matrix_json"  # For debugging
        echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"
      env:
        INPUT: ${{ inputs.os }}
        EXPECTED_INPUTS: "Ubuntu Windows macOS"

  irltest:
    name: IRL Test (${{ matrix.os }}, node-${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [ parse-inputs ]

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.parse-inputs.outputs.matrix-os) }}
        node-version: ${{ fromJSON(needs.parse-inputs.outputs.matrix-node-version) }}

    env:
      FFMPEG_VERSION: ${{ inputs.ffmpeg-version || '7.0.2' }}
      FFMPEG_ARCH: ${{ inputs.ffmpeg-arch || 'x64' }}
      NODE_ENV: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js / ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: npm

    - name: Fetch FFmpeg from cache
      uses: actions/cache/restore@v4
      id: ffmpeg-cache-restore
      with:
        path: ${{ runner.tool_cache }}/ffmpeg/${{ env.FFMPEG_VERSION }}
        key: ffmpeg-${{ runner.os }}-${{ runner.arch }}-${{ env.FFMPEG_VERSION }}
      continue-on-error: true

    # Run this job only if the FFmpeg cache is not available
    - name: Fetch FFmpeg from sources
      if: >-
        ${{
          failure()
          || steps.ffmpeg-cache-restore.outcome != 'success'
          || steps.ffmpeg-cache-restore.outputs.cache-hit != true
        }}
      id: dl-ffmpeg
      uses: FedericoCarboni/setup-ffmpeg@v3
      with:
        ffmpeg-version: ${{ env.FFMPEG_VERSION }}
        architecture: ${{ env.FFMPEG_ARCH }}
        github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}

    - name: Store FFmpeg to cache
      if: ${{ !failure() || steps.dl-ffmpeg.outcome == 'success' }}
      id: ffmpeg-cache-save
      uses: actions/cache/save@v4
      with:
        path: ${{ runner.tool_cache }}/ffmpeg/${{ env.FFMPEG_VERSION }}
        key: ffmpeg-${{ runner.os }}-${{ runner.arch }}-${{ env.FFMPEG_VERSION }}

    - name: Clean install the project
      run: npm ci

    - name: Run IRL Test
      # FIXME: This test is only specific to conversion tests and should be fixed in the future.
      #        This is due to YouTube restricts download YouTube videos in cloud CI environments
      #        and bots automation, unless handled by proxies.
      run: npm run test:irl:no-dltest
